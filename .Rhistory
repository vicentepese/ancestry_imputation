library(readr)
CWTme_mh_APO_001_CWT_features <- read_csv("Documents/Thesis-Stroke/StatisticalAnalysis/CWT/CWTme_mh_APO-001_CWT_features.csv")
View(CWTme_mh_APO_001_CWT_features)
data <- CWTme_mh_APO_001_CWT_features
install.packages('dplyr')
library(dplyr)
data$Label <- factor(data$Label)
data$Stage <- factor(data$Stage)
tst <- data[data$Stage == '1', data$Freq_name = 'Delta']
tst <- data[data$Stage == '1', data$Freq_name == 'Delta',]
tst <- data[data$Stage == '1' & data$Freq_name == 'Delta',]
tst.mean <- group_by(data = tst, add = 'mean')
tst.mean <- group_by(.data = data)
tst.mean <- group_by(.data = data, add = mean())
tst.mean <- group_by(.data = data, add = mean
)
tst.mean <- group_by(.data = data, add = 'mean')
aggregate(x = data, by = list(ID_pat = data$ID_pat, Stage = data$Stage, Chann_name = data$Chann_name, Freq_name = data$Freq_name), FUN = mean)
data.agg <- aggregate(x = data, by = list(ID_pat = data$ID_pat, Stage = data$Stage, Chann_name = data$Chann_name, Freq_name = data$Freq_name), FUN = mean)
View(data.agg)
data$Chann_name <- factor(data$Chann_name)
data$ID_pat <- factor(data$ID_pat)
data$Freq_name <- factor(data$Freq_name)
data.agg <- aggregate(x = data, by = list(ID_pat = data$ID_pat, Stage = data$Stage, Chann_name = data$Chann_name, Freq_name = data$Freq_name), FUN = mean)
View(data.agg)
data.agg <- aggregate(x = data, by = list(data$Freq_name, data$ID_pat, data$Stage, data$Chann_name), FUN = mean)
library(readr)
me_mh_APO_001_CWT_features <- read_csv("Downloads/me_mh_APO-001_CWT_features.csv")
View(me_mh_APO_001_CWT_features)
CWTme_mh_APO_001_CWT_features$Chann_name <- factor(CWTme_mh_APO_001_CWT_features$Chann_name)
install.packages('xlsx')
install.packages('xlsxjars')
install.packages('xlsx')
setInternet2(use=TRUE)
install.packages('rJava')
remove.packages("rJava")
install.packages('rJava')
install.packages('rJava')
install.packages('xlsx')
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
library(HIBAG)
library(parallel)
library(corrplot)
library(randomForest)
library(xlsx)
install.packages('xlsx')
install.packages('xlsxjars')
install.packages('xlsxjars')
install.packages('rJava')
library(rJava)
remove.packages('rJava')
remove.packages(rJava)
install.packages('rJava')
install.packages('rJava')
library(rJava)
library(rJava)
library(rJava)
install.packages('rJava')
install.packages('rJava')
install.packages('rJava')
locate getsp
install.packages('rJava')
remove.packages('rJava')
library(rJava)
install.packages('rJava')
# Import libraries
library(jsonlite)
library(tidyverse)
# Import libraries
library(jsonlite)
library(tidyverse)
library(readr)
library(data.table)
library(ggrepel)
library(viridis)
library(hrbrthemes)
library(HIBAG)
library(parallel)
library(corrplot)
library(randomForest)
library(xlsx)
# Library
library(xlsx)
library(jsonlite)
library(readxl)
# Set working directory
setwd("~/Documents/ancestry_imputation")
# Read settings
settings <- jsonlite::read_json("settings.json")
# Load 1000 genome sample
sample.info <- read_excel(settings$Resources$thougen_sample)
# Get superpulation
superpop <- c()
for (i in 1:nrow(sample.info)){
# Get ID
subj <- sample.info[i,]
# Get superpopulation
if (subj$Population %in% c("CHB","JPT","CHS","CDX", "KHV")){
superpop <- c(superpop, "EAS")
} else if (subj$Population %in% c("GIH","PJL","BEB","STU","ITU")){
superpop <- c(superpop, "SAS")
} else if (subj$Population %in% c("YRI","LWK","GWD","MSL","ESN","ASW","ACB")){
superpop <- c(superpop, "AFR")
} else if (subj$Population %in% c("CEU","TSI","FIN","GBR","IBS")){
superpop <- c(superpop, "EUR")
} else if (subj$Population %in% c("MXL","PUR", "CLM", "PEL")){
superpop <- c(superpop, "AMR")
}
}
# Create dataframe
sample.ethnicity <- data.frame("IID" = sample.info$Sample, "Population" = superpop)
# Library
library(xlsx)
library(jsonlite)
library(readxl)
# Set working directory
setwd("~/Documents/ancestry_imputation")
# Read settings
settings <- jsonlite::read_json("settings.json")
# Load 1000 genome sample
sample.info <- read_excel(settings$Resources$thougen_sample)
# Get superpulation
superpop <- c()
for (i in 1:nrow(sample.info)){
# Get ID
subj <- sample.info[i,]
# Get superpopulation
if (subj$Population %in% c("CHB","JPT","CHS","CDX", "KHV")){
superpop <- c(superpop, "EAS")
} else if (subj$Population %in% c("GIH","PJL","BEB","STU","ITU")){
superpop <- c(superpop, "SAS")
} else if (subj$Population %in% c("YRI","LWK","GWD","MSL","ESN","ASW","ACB")){
superpop <- c(superpop, "AFR")
} else if (subj$Population %in% c("CEU","TSI","FIN","GBR","IBS")){
superpop <- c(superpop, "EUR")
} else if (subj$Population %in% c("MXL","PUR", "CLM", "PEL")){
superpop <- c(superpop, "AMR")
}
}
# Create dataframe
sample.ethnicity <- data.frame("IID" = sample.info$Sample, "Population" = superpop)
settings$Resources$thougen_ethnicity
# Read settings
settings <- jsonlite::read_json("settings.json")
# Load 1000 genome sample
sample.info <- read_excel(settings$Resources$thougen_sample)
# Get superpulation
superpop <- c()
for (i in 1:nrow(sample.info)){
# Get ID
subj <- sample.info[i,]
# Get superpopulation
if (subj$Population %in% c("CHB","JPT","CHS","CDX", "KHV")){
superpop <- c(superpop, "EAS")
} else if (subj$Population %in% c("GIH","PJL","BEB","STU","ITU")){
superpop <- c(superpop, "SAS")
} else if (subj$Population %in% c("YRI","LWK","GWD","MSL","ESN","ASW","ACB")){
superpop <- c(superpop, "AFR")
} else if (subj$Population %in% c("CEU","TSI","FIN","GBR","IBS")){
superpop <- c(superpop, "EUR")
} else if (subj$Population %in% c("MXL","PUR", "CLM", "PEL")){
superpop <- c(superpop, "AMR")
}
}
# Create dataframe
sample.ethnicity <- data.frame("IID" = sample.info$Sample, "Population" = superpop)
# Wwrite
write.table(sample.ethnicity, file = settings$Resources$thougen_ethnicity, quote = FALSE, sep = ',', row.names = FALSE, col.names = TRUE)
